## New google doc here: https://docs.google.com/document/d/1qYSb8i0dTbKvS0bybU3vFDl6jwPmY-iNBoqm2HMWKyM/edit

## Learn how to recognize a color

1. Generate plot image with just one curve

2. Load the image and create the mask

3. Generate more complex plot image with several additional curves, different backgrounds, extra labels / ticks, grid, etc.

- Generate training set

- Raw input set

- Specific set -> e.g 9x9 patches, centered on the mask pixels +- 3 pixels of margin
			   -> can add data augmentation at that stage

- training -> load all the 9x9 patches + label

- Script 1:
	
	Generate bunch of images with mask and true color metadata. You know that any pixel on the mask has the given color.

	Q: also learn to classify whether there is something? Classify the background?

	metadata.json
	Class 0 -> background
	Class 1 -> color
	Class 2 -> color
	Class 3 -> color

	Mask -> class for each pixel

	Only 256x256 images?

	JPEG artefacts?

	Rotation / scale / transforms?

	Output :
	matplotlib/image0001.png
	matplotlib/image0001.mask -> label for each pixel
	matplotlib/image0001.json -> { label0 = #xxxx, label1 = #xxxx, label2 = #xxxx }
	
	Separate script to add jpeg artefacts
	matplotlib/jpeg/image0001.xxx

- Script 2:

	Extract patches from the images

	Train to get the right output: color of the central pixel and class background or not

## Learn how to segment a given color

Similar input set

Color is given. Find the mask.

## Alternative: do not estimate the color first. Directly give the patch and ask to segment the CG drawed stuff on the input image
